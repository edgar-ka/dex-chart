How to connect to the application:
{{- if .Values.ingress.enabled }}
  1. You need ingress controller to be installed in your cluster.
     If not done so, you can run, for example:
     
     helm upgrade --install ingress-nginx ingress-nginx \
      --repo https://kubernetes.github.io/ingress-nginx \
      --namespace ingress-nginx --create-namespace
  
  2. If you work on with some test local minicluster with port 80 already in use,
     you might want to port-forward to your ingress controller:
     
     kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8080:80

  3. Finally, access the application:

     http{{ if $.Values.ingress.tls }}s{{ end }}://{{ .Values.ingress.host }}/?n=42
     
     or
     
     http{{ if $.Values.ingress.tls }}s{{ end }}://{{ .Values.ingress.host }}:8080/?n=42

{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "dex-app-k8s.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "dex-app-k8s.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "dex-app-k8s.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "dex-app-k8s.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=application-rw" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}
